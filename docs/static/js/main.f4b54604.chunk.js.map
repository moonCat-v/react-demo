{"version":3,"sources":["redux/reducer/index.js","redux/store.js","pages/all/components/dragEvent.jsx","pages/index.jsx","pages/all/index.jsx","App.js","index.js"],"names":["initState","obj","list","num","string","rootreduce","state","action","composeMidd","compose","applyMiddleware","thunk","createStore","reducer","composeWithDevTools","id","text","DragEvent","_useState","useState","_useState2","Object","slicedToArray","leftDragList","setleftDragList","_useState3","_useState4","rightDragList","setrightDragList","dataRef","useRef","current","left","callback","right","handleDragOver","e","preventDefault","handleDrop","arrow","_e$target","target","dataset","classList","remove","curData","JSON","parse","dataTransfer","getData","preData","mapPreData","stringify","filter","item","concat","toConsumableArray","index","findIndex","splice","handleDragEnter","add","handleDragLeave","react_default","a","createElement","className","entries","map","_ref","_ref2","key","_ref2$","onDragOver","onDragEnter","onDragLeave","onDrop","data-id","draggable","onDragStart","data","setData","nodeObj","All","Index","flag","setFlag","useEffect","setTimeout","values","Key","App","pages_Index","ReactDOM","render","StrictMode","es","store","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f4b54604.chunk.js","sourcesContent":["\nconst initState = {\n  obj: {},\n  list: [],\n  num: 0,\n  string: ''\n}\n\nfunction rootreduce(state, action) {\n  // console.log(action, 111)\n  return initState\n}\n\nexport default rootreduce","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport reducer from './reducer'\n\nconst composeMidd = compose(\n  applyMiddleware(thunk)\n)\n\n\nexport default createStore(reducer, composeWithDevTools(composeMidd))","import React, { useState, useRef } from 'react'\nimport './style/drag.css'\n\nconst list = [\n  {\n    id: '1',\n    text: '序列1'\n  },\n  {\n    id: '2',\n    text: '序列2'\n  },\n  {\n    id: '3',\n    text: '序列3'\n  },\n  {\n    id: '4',\n    text: '序列4'\n  },\n  {\n    id: '5',\n    text: '序列5'\n  },\n]\n\nexport default function DragEvent() {\n\n  const [leftDragList, setleftDragList] = useState(list)\n  const [rightDragList, setrightDragList] = useState([])\n  const dataRef = useRef(null)\n\n  // 定义初始化元素需要数据\n  dataRef.current = {\n    left: {\n      callback: setleftDragList,\n      list: leftDragList,\n    },\n    right: {\n      callback: setrightDragList,\n      list: rightDragList,\n    }\n  }\n\n  // 拖拽元素在目标元素移动事件-阻止浏览器默认行为让目标元素成为可释放的目标元素\n  const handleDragOver = e => e.preventDefault()\n\n  // 拖拽完成事件-处理完成拖拽时的逻辑\n  const handleDrop = (callback, arrow) => {\n    return e => {\n      const { dataset: { id }, classList } = e.target\n      classList.remove('over')\n      const curData = JSON.parse(e.dataTransfer.getData('itemData'))\n\n      callback(preData => {\n        const mapPreData = JSON.parse(JSON.stringify(preData)).filter(item => item.id !== curData.id)\n        if (!id) return [...mapPreData, curData]\n\n        const index = mapPreData.findIndex(item => item.id === id)\n        mapPreData.splice(index, 0, curData)\n        return mapPreData\n      })\n\n      if (arrow === 'left') setrightDragList(preData => preData.filter(item => item.id !== curData.id))\n      else setleftDragList(preData => preData.filter(item => item.id !== curData.id))\n    }\n  }\n\n  // 拖拽元素进入目标元素时触发事件-为目标元素添加拖拽元素进入时的样式效果\n  const handleDragEnter = e => e.target.classList.add('over')\n\n  // 拖拽元素离开目标元素时触发事件-移除目标元素的样式效果\n  const handleDragLeave = e => e.target.classList.remove('over')\n\n  // 拖拽开始时触发事件-通过dataTransfer对象设置所需要的数据\n  const handleDragStart = data => e => e.dataTransfer.setData('itemData', JSON.stringify(data))\n\n  return (\n    <div className=\"dragEvent-wrap\">\n      {\n        Object.entries(dataRef.current).map(([key, { callback, list }]) => {\n          return (\n            <div\n              key={key}\n              className=\"content-wrap\"\n              onDragOver={handleDragOver}\n              onDragEnter={handleDragEnter}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop(callback, key)}\n            >\n              {\n                list.map(item => \n                (<div\n                  className=\"item-text\"\n                  key={item.id}\n                  data-id={item.id}\n                  // draggable 属性设置元素为可拖拽元素\n                  draggable\n                  onDragStart={handleDragStart(item)}\n                >\n                  {item.text}\n                </div>))\n              }\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\n// import Demo from './demo/Demo'\n// import Haaaa from './immer/immer'\n// import Paper from './paper/paper'\nimport All from './all'\n\nconst nodeObj = {\n  // Demo,\n  // Haaaa,\n  // Paper,\n  All\n}\n\nexport default function Index() {\n  const [flag, setFlag] = useState(true)\n\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(false)\n    }, 3000)\n  }, [flag])\n\n  // let ShowNode = Demo\n  // if (!flag) ShowNode = Haaaa\n\n  return (\n    <div>\n      {/* {ShowNode} */}\n      {/* <ShowNode className='22222' /> */}\n      {/* <Demo></Demo> */}\n      {/* <Immer></Immer> */}\n\n      {/* 循环渲染组件 */}\n      {Object.values(nodeObj).map((Key, index) => <Key key={index} />)}\n    </div>\n  )\n}\n","/*\n  在react中使用jsx，由于jsx语法会编译为react.createdElement形式调用，所以即使react库没有直接使用，也必须进行导入\n  因为react库必须包含在jsx代码的作用域内\n*/\nimport React, { createRef, useEffect } from 'react';\n// import RefForward from './components/refForward';\n// import RenderProps from './components/renderProps'\n// import Round from './components/round';\n// import DragEvemt2 from './components/dragEvemt2';\nimport DragEvent from './components/dragEvent';\n\n// import Slot from './components/Slot';\n\n// import Model from './components/model'\n\nexport default function Index() {\n  // const refButton = createRef()\n\n  // useEffect(() => {\n  //   // console.log(refButton.current, '1111')\n  //   refButton.current.focus()\n  // }, [refButton])\n\n  // const Components = {\n  //   Button(props) {\n  //     return <button>组件{props.children('点击')}</button>\n  //   }\n  // }\n\n  /* \n    diff\n    在react中的diff算法是从组件树的根节点进行比较的\n    1、当根节点的元素为不通类型时（如：span和div）那么就会拆卸掉整个组件树并渲染新的组件树，内部的元素和组件不会复用，而是也会跟着卸载和渲染，那么在卸载和重新渲染的过程中对应的生命周期钩子也会进行相应的执行。\n    2、当根节点为相同类型元素时，那么元素不会进行卸载和更新，只会去对比更新元素上的属性（如<span title=\"aaa\"></span>和<span title=\"bbbb\"></span>）然后继续往下递归其子元素\n    3、当遍历子元素时会优先对比相同key值得元素进行更新，然后在逐级对比其他子元素\n  */\n\n  return <div>\n    <hr />\n    {/* {React.createElement(RefForward, {ref:refButton, ha:refButton}, 'ssss')} */}\n    {/* 下面组件的写法，属于jsx语法，其实是react.createElement(组件，props，children)方法的语法糖, 使用原来方法一样进行渲染。（在组件元素多级嵌套的时候还是使用jsx语法简洁易读）\n      在jsx中组件的开头必须为大写字母,\n      jsx中属性未进行赋值如aa那么它在props接受时默认为true，\n      当要传递一个对象中多个属性时可以直接使用...运算符如{...Components}\n    */}\n    {/* {\n      ref属性直接传递到dom元素时，其current属性指向的就是这个元素对象本身，\n      如果指向的自行定义的class组件，那么其current属性指向的就是class组件的实例。\n      （注意：ref不能直接指向函数组件，因为他没有自己的实例，打印为null， 如果想接受的话，子组件可以使用forword方法就行接受）\n      ref属性除了使用已经创建好的引用外，还可以传入一个函数，当dom加载完成前，会自动的将ref的引用传入函数内，只需要在函数内使用形参进行接受就可以\n    } */}\n    {/* <RefForward aa ref={refButton} ha={refButton} {...Components} /> */}\n\n\n    {/* 在jsx语法中可以使用点语法进行组件加载，适用于多个组件集合的情况下 */}\n    {/* <Components.Button> */}\n      {/* 组件的children可以传递任何类型，包括字符串、组件、元素、函数等等 */}\n      {/* {(str) => str}\n    </Components.Button>\n    <RenderProps render={bound => <Round {...bound} />} /> */}\n\n    <DragEvent></DragEvent>\n    {/* <DragEvemt2></DragEvemt2> */}\n    {/* // \"sideEffects\": , // 这个属性可以设置是   否要进行treshaking将多余的代码删除，也可以设置引入的指定的文件进行删除 */}\n    {/* <Model></Model> */}\n\n    {/* 使用webpack-library配置自己创建的项目目录下编译后，可以将写的方法和文件打包成为一个模块，来让别人进行引入（可以自己本地项目引入也可以发布在npm上） 如ladash这个库 */}\n    {/*  webpack和框架等，只是为了在开发阶段让你更好的更清晰的可以去使用一些现有的库或者语法是项目更好维护和更快的开发\n    ，最后都会通过构建工具，将写的高级语法转化为最原始的index。html、js、css等文件，然后再引入进来进行加载  */}\n\n    {/* 在webpack中使用fileloader以后，引入的图片会当做模块进行处理，但是她的类型是esmoudle，所以需要加上.defaulte属性使用，如果不想加defalte的话\n    1、直接使用es引入 import xxx from ‘dd’   2、修改当前的loader配置，吧esMoudle设置为false即可*/}\n    {/* url-loader 将图片转为base64格式，不在进行拷贝，同事url-loader内部可以调用file-loader，需要设置limit属性\n    通常来说，都是小图片转为base64的格式，而大图片还是采用拷贝后当做模块进行引入 */}\n    {/* 在webpach5中提供了asset模块就不需要在使用多个loader进行处理资源了， 1、resource模式-相当于fileloader将图片当做模块进行拷贝 2、inline模式相当于url-loader\n    将资源转成base64格式直接在代码中使用。 还可以直接设置asset通过配置将不同大小的资源进行不通的处理 */}\n\n    {/* 使用asset处理字体图标---直接粘贴相应的font文件，然后引入css文件，使用asset处理 ttf等资源文件，是webpack打包的时候能够识别就可以 */}\n\n    {/* <Slot /> */}\n    \n  </div>;\n}\n","import React from 'react'\nimport Index from './pages'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}